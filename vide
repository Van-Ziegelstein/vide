#!/bin/bash

# ---= arg parse =---
help()
{
    echo "usage: vide <path to dir with 'nmap' folder>
       [-h]                          show this message
       [-w]                          enable [w]hatweb scan
       [-i]                          enable nucle[i] scan
       [-o]                          enable nikt[o] scan
       [-f]                          enable directory brute [f]orcing
       [-d]                          [d]isable screenshotting
       [-p <path to webservers.txt>] [p]ass list of servers to process <PROTO>://<IP>[:<PORT>]"
    exit 2;
}

DO_SCREENSHOTS=true;
DO_WHATWAB=false;
DO_NIKTO=false;
DO_NUCLEI=false;
DO_FFUF=false;
SHOW_BANNER=true;
PROJECT_DIR=$1;
shift;
[[ -z  $PROJECT_DIR  ]] && echo "project path with 'nmap' directory is required" && exit 2;

while getopts 'wdiofhp:' flag; do
  case "${flag}" in
    w) DO_WHATWAB='true' ;;
    d) DO_SCREENSHOTS=false ;;
    i) DO_NUCLEI=true ;;
    o) DO_NIKTO=true ;;
    f) DO_FFUF=true ;;
    h) help ;;
    p) OPT_WEBSERVERS_LIST="${OPTARG}" ;;
    *) help
       exit 1 ;;
  esac
done

# ---= config =---
# globals
VERSION=1.0;
timestamp=$(date +%d.%m_%H%M);
COUNTER=1;
THREADS=40;
BASE="$PROJECT_DIR";
GO_PATH="$HOME/go";
WORK_DIR="$BASE/vide_$timestamp";
NMAP_PATH="$BASE/nmap";
WS_FILE="$WORK_DIR/webservers.txt";
CANDIDATES_FILE="$NMAP_PATH/host_port.txt";
RST='\033[0m'
BG='\033[47m'
FG='\033[0;30m'

# nikto
NIKTO_DIR="$WORK_DIR/nikto";

# screenshots
SCREEN_DIR="$WORK_DIR/screens";
SS_TIMEOUT=15;
DOM_DELAY=1000;

# httpx
HTTPX_DIR="$WORK_DIR/httpx";
HTTPX_LOG="$HTTPX_DIR/scan.log";
RATE_LIMIT=100

# whatweb
WW_DIR="$WORK_DIR/whatweb";

# nuclei
NUCLEI_DIR="$WORK_DIR/nuclei";
NUCLEI_TEMPLATES="$HOME/tools/nuclei-templates"; #CHANGE ME

# ffuf
FFUF_DIR="$WORK_DIR/ffuf";
WORDLIST="/opt/goto.wordlist"; #CHANGE ME
FC_STRING="404"

# bins
CH=/usr/bin/chromium;
WW=/usr/bin/whatweb;
XMLS=/usr/bin/xmlstarlet;
NIKTO=/usr/bin/nikto;
HTTPX=$GO_PATH/bin/httpx;
NUCLEI=$GO_PATH/bin/nuclei;
FFUF=/usr/bin/ffuf;

# ---= init =---
mkdir -p "$WORK_DIR";
mkdir -p "$HTTPX_DIR";
[ "$DO_WHATWAB" = true ] && mkdir -p "$WW_DIR";
[ "$DO_NIKTO" = true ] && mkdir -p "$NIKTO_DIR";
[ "$DO_FFUF" = true ] && mkdir -p "$FFUF_DIR";
[ "$DO_SCREENSHOTS" = true ] && mkdir -p "$SCREEN_DIR";


if $SHOW_BANNER; then
cat <<EOF
        _______________
    ==c(___(o(______(_()
            \=\\
             )=\\
            //|\\\\  ~vide~ high-level web server enumeration
           //|| \\\\  Version: $VERSION
          // ||  \\\\
         //  ||   \\\\
        //         \\\\
EOF
fi;

# ---= nmap parsing =---
if [ -z "$OPT_WEBSERVERS_LIST" ]; then
    [ ! -d "$NMAP_PATH" ] && echo "Directory '$NMAP_PATH' does not exit. Be sure path contains folder called 'nmap' with .xml data." && exit 2;
    echo -e "$FG$BG[*] grepping open ports per host from $NMAP_PATH/*.xml";
    $XMLS sel -t -m '//port/state[@state="open"]/parent::port' \
                -v 'ancestor::host/address[@addrtype="ipv4"]/@addr' \
                -o : -v './@portid' -n "$NMAP_PATH"/*.xml | sort -u -V > "$CANDIDATES_FILE";
else
    CANDIDATES_FILE=$OPT_WEBSERVERS_LIST;
fi;

CANDIDATES=$(wc -l "$CANDIDATES_FILE" | cut -d' ' -f1);

if [ "$CANDIDATES" == "0" ]; then
        echo "$FG$BG[!] no web servers found$RST";
        exit 1;
fi;

# ---= scan for web servers among all found ports =---
echo -e "$FG$BG[*] identifying web servers from $CANDIDATES candidates$RST";
$HTTPX -l "$CANDIDATES_FILE" -exclude-cdn -ec -nf -H "$0" \
                           -x ALL -ldp -ec -nfs -server -probe -title -sc -cl \
                           -tech-detect -threads "$THREADS" -rate-limit "$RATE_LIMIT" -o "$HTTPX_LOG";
grep -v "31mFAILED.*0m" "$HTTPX_LOG" | grep . | cut -d' ' -f1 | sort -u -V > "$WS_FILE";
NUM_WS=$(wc -l "$WS_FILE" | cut -d' ' -f1);
if [ "$NUM_WS" == "0" ]; then
    echo "[!] no web servers found";
    exit 1;
fi;
echo -e "$FG$BG[*] found $NUM_WS web servers";

# ---= take screenshots of web server =---
if $DO_SCREENSHOTS; then
echo -e "$FG$BG[*] screenshotting each server:$RST";
for TARGET in $(grep -v "#" "$WS_FILE" | sort -V); do
    echo -e "\t$FG$BG[$COUNTER/$NUM_WS] taking screenshots of: $TARGET$RST";
    TMP_TARGET=$(echo "$TARGET" | cut -d '/' -f3-);
    PROTO=$(echo "$TARGET" | cut -d ':' -f1);
    FILE_NAME=$(echo "$TMP_TARGET" | tr ':' '_');
    mkdir -p "$SCREEN_DIR/$PROTO";
    timeout $SS_TIMEOUT $CH --no-sandbox \
                            --headless \
                            --ignore-certificate-errors \
                            --password-store=basic \
                            --run-all-compositor-stages-before-draw \
                            --virtual-time-budget="$DOM_DELAY" \
                            --print-to-pdf="$SCREEN_DIR/$PROTO/$FILE_NAME.pdf" "$PROTO://$TMP_TARGET/" 2>/dev/null;
    let COUNTER++;
done;
COUNTER=1;
fi;

# ---= scan server tech/headers =---
if $DO_WHATWAB; then
echo -e "$FG$BG[*] WhatWeb tech scans:$RST";
for TARGET in $(grep -v "#" "$WS_FILE" | sort -V); do
    TMP_TARGET=$(echo "$TARGET" | cut -d '/' -f3-);
    IP=$(echo "$TMP_TARGET" | cut -d ':' -f1);
    FILE_NAME=$(echo "$TMP_TARGET" | tr ':' '_');
    echo -e "\t$FG$BG[$COUNTER/$NUM_WS] WhatWeb scan of: $TARGET$RST";
    mkdir -p "$WW_DIR/$FILE_NAME";
    $WW -v -a 3 "$TARGET" --log-verbose="$WW_DIR/$FILE_NAME/deep.log" --max-threads="$THREADS" | tee "$WW_DIR/$FILE_NAME/brief.log";
    let COUNTEI++;
done;
COUNTER=1;
fi;


# ---= deploy nuclei scans =---
if $DO_NUCLEI; then
echo -e "$FG$BG[*] nuclei scans:$RST";
for TARGET in $(grep -v "#" "$WS_FILE" | sort -V); do
    echo -e "\t$FG$BG[$COUNTER/$NUM_WS] full template scan of: $TARGET$RST";
    $NUCLEI -ud "$NUCLEI_TEMPLATES" -u "$TARGET" -ni -i "$IFACE" -irr -stats -timeout 5 -markdown-export "$NUCLEI_DIR"/"$TARGET";
    let COUNTEI++;
done;
COUNTER=1;
fi;

# ---= deploy nikto scans =---
if $DO_NIKTO; then
echo -e "$FG$BG[*] nikto scans:$RST";
TMP_file=tmp_file.txt;
touch $TMP_file;
for TARGET in $(grep -v "#" "$WS_FILE" | sort -V); do
    PROTO=$(echo "$TARGET" | cut -d ':' -f1);
    TMP_TARGET=$(echo "$TARGET" | cut -d '/' -f3-);
    IP=$(echo "$TMP_TARGET" | cut -d ':' -f1);
    FILE_NAME=$(echo "$TMP_TARGET" | tr ':' '_');
    if [[ $PROTO == "https"* ]]; then
        TMP=$(echo "$TARGET" | cut -d':' -f3-);
        PORT="${TMP:-443}"
        DO_SSL=true;
    else
        TMP=$(echo "$TARGET" | cut -d':' -f3-);
        PORT="${TMP:-80}";
        DO_SSL=false;
    fi;

    if grep -Fxq "$IP:$PORT" $TMP_file; then
        continue
    else
        if $DO_SSL; then
            echo "n" | $NIKTO -no404 -host "$IP:$PORT" -Tuning x567 -port "$PORT" -ssl -Format htm -output "$NIKTO_DIR/$FILE_NAME.html";
        else
            echo "n" | $NIKTO -no404 -host "$IP:$PORT" -Tuning x567 -port "$PORT" -nossl -Format htm -output "$NIKTO_DIR/$FILE_NAME.html";
        fi;
        echo "$IP:$PORT" >> $TMP_file;
    fi;

done;
rm -f $TMP_file
fi;

# ---= directory brute force =---
if $DO_FFUF; then
echo -e "$FG$BG[*] FFUF dir brute force:$RST";
TMP_file=tmp_file.txt;
touch $TMP_file;
for TARGET in $(grep -v "#" "$WS_FILE" | sort -V); do
    PROTO=$(echo "$TARGET" | cut -d ':' -f1);
    TMP_TARGET=$(echo "$TARGET" | cut -d '/' -f3-);
    IP=$(echo "$TMP_TARGET" | cut -d ':' -f1);
    FILE_NAME=$(echo "$TMP_TARGET" | tr ':' '_');
    if [[ $PROTO == "https"* ]]; then
        TMP=$(echo "$TARGET" | cut -d':' -f3-);
        PORT="${TMP:-443}"
    else
        TMP=$(echo "$TARGET" | cut -d':' -f3-);
        PORT="${TMP:-80}";
    fi;

    if grep -Fxq "$IP:$PORT" $TMP_file; then
        continue
    else
        $FFUF -u "$PROTO://$IP:$PORT/FUZZ" -w "$WORDLIST" -mc all -fc "$FC_STRING" -c -t "$THREADS" -of html -o "$FFUF_DIR/$FILE_NAME.html";
        echo "$IP:$PORT" >> $TMP_file;
    fi;

done;
rm -f $TMP_file
fi;

echo -e "$FG$BG[*] DONE";
exit 0;